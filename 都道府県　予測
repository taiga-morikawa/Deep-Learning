# デフォルト
import pandas as pd
import numpy as np 
import matplotlib.pyplot as plt

# K-means法
from sklearn.cluster import KMeans

# PCA
from sklearn.decomposition import PCA

data = pd.read_csv("/content/consumerPrices.csv",engine="python",encoding="shift-jis")

data

	都道府県	食料	住居	水道光熱費	家具家事用品	衣類	保険医療	交通通信	教育	教養娯楽	諸雑費
0	Hokkaido	98.7	82.6	116.3	99.3	103.8	100.2	99.5	93.2	97.1	100.9
1	Aomori	97.4	95.7	109.0	96.2	97.1	101.0	100.5	93.2	96.4	97.8
2	Iwate	96.6	89.4	111.0	102.2	97.8	100.4	99.7	90.1	99.8	97.0
3	Miyagi	97.2	97.1	101.3	104.0	95.6	100.9	97.5	99.5	99.3	99.2
4	Akita	97.3	86.1	107.2	103.1	102.4	98.9	98.0	87.1	98.0	100.2
5	Yamagata	101.7	91.3	111.6	93.5	105.7	97.0	99.7	105.4	99.1	97.6
6	Fukushima	100.0	92.5	108.6	100.9	106.2	99.9	98.8	90.9	96.6	102.9
7	Ibaraki	99.1	96.3	101.9	93.0	97.5	98.0	96.7	89.5	95.2	101.4
8	Tochigi	99.5	87.9	96.7	100.3	115.7	99.1	97.7	101.9	94.9	99.8
9	Gumma	99.1	87.5	91.2	96.9	98.2	100.0	97.1	79.9	95.5	98.9
10	Saitama	100.9	109.3	93.0	101.8	103.1	101.0	100.6	103.7	104.5	100.7
11	Chiba	100.6	102.0	100.4	101.0	91.7	101.1	99.1	97.9	102.0	99.6
12	Tokyo	103.1	133.2	94.6	102.8	96.5	101.7	104.4	108.3	104.0	99.5
13	Kanagawa	102.5	124.7	97.6	101.9	101.7	99.0	104.4	112.6	104.8	102.1
14	Nigata	100.2	90.9	98.5	97.5	105.9	99.4	98.1	97.1	99.5	100.6
15	Toyama	100.4	87.3	102.2	101.7	100.0	101.8	97.7	85.7	97.2	102.6
16	Ishikawa	103.0	86.0	103.0	99.6	107.2	101.9	98.9	103.2	98.2	101.3
17	Fukui	103.1	86.2	93.5	108.7	99.1	102.4	99.1	103.4	95.2	101.9
18	Yamanashi	99.7	94.3	94.7	100.2	107.2	97.4	98.4	87.7	98.3	100.0
19	Nagano	94.1	87.1	99.7	97.0	102.5	98.3	99.8	94.7	98.1	102.6
20	Gifu	97.4	84.1	92.9	94.1	101.9	99.3	100.4	92.5	97.4	99.8
21	Shizuoka	98.7	97.2	96.8	98.0	97.4	100.2	99.5	82.0	99.9	98.4
22	Aichi	98.2	95.3	95.7	97.2	99.6	99.7	98.5	96.4	100.7	99.2
23	Mie	100.4	95.6	96.8	98.6	99.4	99.1	98.7	98.9	95.7	98.1
24	Shiga	99.5	88.3	101.4	97.6	104.3	100.6	100.6	109.0	96.8	101.1
25	Kyoto	100.5	92.3	101.4	100.4	98.7	97.6	102.6	112.3	101.9	101.4
26	Osaka	99.4	97.6	98.7	99.9	99.1	99.6	101.0	108.9	102.3	96.6
27	Hyogo	99.9	100.0	99.5	101.7	105.4	98.4	100.8	102.2	101.5	103.5
28	Nara	94.3	84.2	101.9	98.9	93.3	99.3	100.4	95.2	99.3	99.3
29	Wakayama	100.9	99.0	102.0	100.0	99.5	101.3	98.9	105.1	96.8	99.6
30	Tottori	102.3	80.2	104.4	100.4	105.9	100.4	97.9	88.5	94.6	99.2
31	Shimane	102.4	84.2	110.5	99.2	101.3	99.2	99.5	97.9	97.2	101.0
32	Okayama	99.0	86.3	106.4	100.2	106.6	101.2	95.7	87.4	96.0	101.2
33	Hiroshima	101.9	89.1	104.6	97.2	95.5	99.9	99.3	97.6	96.4	99.4
34	Yamaguchi	101.3	89.1	108.2	99.6	106.4	103.1	97.4	86.0	95.5	99.5
35	Tokushima	100.5	89.2	104.6	101.7	107.7	98.2	97.0	97.8	98.3	99.8
36	Kagawa	98.4	85.7	105.6	100.3	96.4	100.3	100.0	95.3	96.4	103.0
37	Ehime	100.1	85.7	107.4	103.0	100.1	99.8	97.7	91.2	98.4	97.7
38	Kochi	102.6	88.9	102.6	98.2	102.0	100.8	97.5	93.6	96.8	100.5
39	Fukuoka	95.7	85.3	105.3	100.2	97.0	100.0	97.2	95.8	97.2	101.7
40	Saga	97.0	82.6	107.6	96.1	103.9	98.6	98.2	94.8	92.1	98.8
41	Nagasaki	99.7	92.8	110.4	100.8	112.3	100.1	100.4	87.1	96.2	101.8
42	Kumamoto	101.9	81.8	102.3	102.9	101.3	100.1	99.3	92.9	95.4	100.2
43	Oita	98.9	83.8	104.3	99.6	95.6	97.2	97.1	106.5	92.9	97.8
44	Miyazaki	97.9	85.2	100.5	101.3	97.5	98.9	97.8	89.6	91.1	97.2
45	Kagoshima	99.3	80.5	100.6	94.1	90.1	100.4	99.2	91.3	92.3	96.9
46	Okinawa	103.5	84.8	101.4	99.4	100.2	100.8	98.2	93.6	95.8	94.8

# 「食料」と「水道光熱費」列の抜出し
data_2dim = data[["食料","水道光熱費"]]

data_2dim

	食料	水道光熱費
0	98.7	116.3
1	97.4	109.0
2	96.6	111.0
3	97.2	101.3
4	97.3	107.2
5	101.7	111.6
6	100.0	108.6
7	99.1	101.9
8	99.5	96.7
9	99.1	91.2
10	100.9	93.0
11	100.6	100.4
12	103.1	94.6
13	102.5	97.6
14	100.2	98.5
15	100.4	102.2
16	103.0	103.0
17	103.1	93.5
18	99.7	94.7
19	94.1	99.7
20	97.4	92.9
21	98.7	96.8
22	98.2	95.7
23	100.4	96.8
24	99.5	101.4
25	100.5	101.4
26	99.4	98.7
27	99.9	99.5
28	94.3	101.9
29	100.9	102.0
30	102.3	104.4
31	102.4	110.5
32	99.0	106.4
33	101.9	104.6
34	101.3	108.2
35	100.5	104.6
36	98.4	105.6
37	100.1	107.4
38	102.6	102.6
39	95.7	105.3
40	97.0	107.6
41	99.7	110.4
42	101.9	102.3
43	98.9	104.3
44	97.9	100.5
45	99.3	100.6
46	103.5	101.4


kmeans = KMeans(n_clusters=4)

kmeans.fit(data_2dim)

groups = kmeans.predict(data_2dim)

groups

array([0, 0, 0, 3, 0, 0, 0, 2, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 3, 1, 1,
       1, 1, 2, 2, 1, 2, 3, 2, 2, 0, 0, 2, 0, 2, 0, 0, 2, 3, 0, 0, 2, 2,
       3, 2, 2], dtype=int32)
       
       
plt.figure(figsize=[15,15])

# グループ番号0～3でそれぞれ繰り返し処理
for group_num in [0,1,2,3]:

# あるグループ番号に対応するサンプルを抜き出す
  group_samples = data_2dim[groups == group_num]

# 散布図を描く
  plt.scatter(group_samples["食料"],
              group_samples["水道光熱費"],
              #点のサイズ
              s=100,
              label=group_num)
  
#都道府県のテキストを付与
  group_samples_pref = data[groups == group_num]["都道府県"]
  for pref,(x,y) in zip(group_samples_pref,group_samples.values):
    plt.annotate(pref,(x,y))

# 横軸のラベル
plt.xlabel("Food Index") 
# 縦軸のラベル
plt.ylabel("Unility Charges Index")
# 凡例表示
plt.legend()
# グラフ描画
plt.show()


# クラスタ数を4として、空のモデルの器を作る
kmeans = KMeans(n_clusters=4)

data_without_pref = data.drop("都道府県", axis=1)

kmeans.fit(data_without_pref)

groups = kmeans.predict(data_without_pref)

groups

array([0, 0, 0, 2, 0, 2, 0, 3, 2, 3, 2, 2, 1, 1, 2, 3, 2, 2, 3, 3, 3, 3,
       2, 2, 2, 2, 2, 2, 3, 2, 0, 0, 0, 3, 0, 0, 3, 0, 3, 3, 0, 0, 0, 2,
       3, 3, 3], dtype=int32)
       
       
plt.figure(figsize=[15,15])

# グループ番号0～3でそれぞれ繰り返し処理
for group_num in [0,1,2,3]:

# あるグループ番号に対応するサンプルを抜き出す
  group_samples = data_2dim[groups == group_num]

# 散布図を描く
  plt.scatter(group_samples["食料"],
              group_samples["水道光熱費"],
              #点のサイズ
              s=100,
              label=group_num)
  
#都道府県のテキストを付与
  group_samples_pref = data[groups == group_num]["都道府県"]
  for pref,(x,y) in zip(group_samples_pref,group_samples.values):
    plt.annotate(pref,(x,y))

# 横軸のラベル
plt.xlabel("Food Index") 
# 縦軸のラベル
plt.ylabel("Unility Charges Index")
# 凡例表示
plt.legend()
# グラフ描画
plt.show()


# 圧縮次元数を2として、空のモデルの器を作る
pca = PCA(n_components=2)

# 実際にデータを与えて学習する
pca.fit(data_without_pref)

# PCA実行
coors = pca.transform(data_without_pref)

# 圧縮後の各サンプルの２次元座標表示(numpy)
coors

array([[-1.18363891e+01, -4.95779859e+00],
       [ 5.09172818e-01,  3.21475920e+00],
       [-5.72580321e+00,  2.75079315e+00],
       [ 7.01437090e+00,  4.94652346e-01],
       [-9.63633732e+00,  4.20113702e+00],
       [ 2.10131090e+00, -1.10300552e+01],
       [-3.18386732e+00,  2.64664887e+00],
       [ 1.29844585e-01,  8.23489246e+00],
       [-3.68808706e-01, -6.92569304e+00],
       [-9.03974082e+00,  1.54697539e+01],
       [ 2.19120443e+01,  3.01625362e+00],
       [ 1.14426642e+01,  4.51788018e+00],
       [ 4.41888912e+01,  9.16061392e+00],
       [ 3.83968946e+01,  4.59630491e-01],
       [ 8.28777783e-01, -6.79071410e-01],
       [-8.13340134e+00,  7.39596281e+00],
       [-1.27201512e+00, -9.36500294e+00],
       [ 1.37160553e+00, -6.40410411e+00],
       [-8.61143487e-02,  9.47194420e+00],
       [-3.95718471e+00,  1.43728983e-02],
       [-6.05514646e+00,  2.34395498e+00],
       [-7.88234978e-02,  1.64837831e+01],
       [ 5.15669581e+00,  3.34089466e+00],
       [ 5.55283976e+00,  7.55190974e-01],
       [ 3.37438254e+00, -1.26524460e+01],
       [ 9.90936570e+00, -1.33318290e+01],
       [ 1.29854888e+01, -7.27716821e+00],
       [ 1.14557328e+01, -1.65480393e+00],
       [-5.77632841e+00, -1.01715177e+00],
       [ 1.04966974e+01, -4.40009306e+00],
       [-1.39714010e+01,  6.08398020e-01],
       [-6.73953955e+00, -6.84416659e+00],
       [-1.00398569e+01,  3.81855866e+00],
       [-1.64245689e+00, -2.31821007e+00],
       [-8.59999228e+00,  5.71532014e+00],
       [-1.76617498e+00, -3.83138897e+00],
       [-5.65752099e+00, -2.04418748e+00],
       [-7.83138744e+00,  6.90938490e-01],
       [-3.54364506e+00,  8.40277053e-01],
       [-6.05238515e+00, -2.38067554e+00],
       [-1.06908461e+01, -4.24086619e+00],
       [-5.33896055e+00,  4.86157167e+00],
       [-9.49432862e+00, -1.54205016e+00],
       [-2.83461625e+00, -1.21863776e+01],
       [-9.05435814e+00,  3.72161547e+00],
       [-1.17265294e+01,  1.25554124e+00],
       [-6.69282008e+00, -4.02199641e-01]])
       
       
# グラフサイズ指定
plt.figure(figsize=[15,15])

# 散布図を描く
plt.scatter(coors[:, 0],
              coors[:, 1],
              #点のサイズ
              s=100,)
  
#都道府県のテキストを付与
for pref,(x,y) in zip(data["都道府県"],coors):
    plt.annotate(pref,(x,y))

# 横軸のラベル
plt.xlabel("PCA Dimension1") 
# 縦軸のラベル
plt.ylabel("PCA Dimension2")
# グラフ描画
plt.show()


# クラスタ数を4として、空のモデルの器を作る
kmeans = KMeans(n_clusters=4)

# 実際にデータを与えて学習する
kmeans.fit(coors)

groups = kmeans.predict(coors)

groups

array([3, 3, 3, 1, 3, 0, 3, 3, 0, 3, 1, 1, 2, 2, 0, 3, 0, 0, 3, 3, 3, 3,
       1, 1, 0, 0, 1, 1, 3, 1, 3, 0, 3, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 0,
       3, 3, 3], dtype=int32)
       
       
# グラフのサイズ指定
plt.figure(figsize=[15,15])

# グループ番号0～3でそれぞれ繰り返し処理
for group_num in [0,1,2,3]:

# あるグループ番号に対応するサンプルを抜き出す
  group_samples = coors[groups == group_num]

# 散布図を描く
# 横軸は圧縮次元の1つ目
  plt.scatter(group_samples[:, 0], 
# 縦軸は圧縮次元の2つ目
              group_samples[:, 1],
              #点のサイズ
              s=100,
# 凡例用にラベルを付けておく
              label=group_num)
  
#都道府県のテキストを付与
  group_samples_pref = data[groups == group_num]["都道府県"]
  for pref,(x,y) in zip(group_samples_pref,group_samples):
    plt.annotate(pref,(x,y))

# 横軸のラベル
plt.xlabel("PCA Dimension1") 
# 縦軸のラベル
plt.ylabel("PCA Dimension2")
# 凡例表示
plt.legend()
# グラフ描画
plt.show()       
